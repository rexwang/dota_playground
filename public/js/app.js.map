{"version":3,"sources":["app.js","add-a-team.js","team-info.js","region-factory.js","team-factory.js"],"names":[],"mappingsrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["'use strict';\n\nangular.module(\n  'DotaPlayground',\n  [\n    'ui.router',\n    'ngResource',\n    'ui.bootstrap'\n  ],\n  function($interpolateProvider) {\n    $interpolateProvider.startSymbol('<%');\n    $interpolateProvider.endSymbol('%>');\n  }\n)\n\n.config(function($stateProvider, $urlRouterProvider) {\n  // For any unmatched url, redirect to /dashboard\n  $urlRouterProvider.otherwise('/dashboard');\n\n  $stateProvider\n    .state('dashboard', {\n      url: '/dashboard',\n      templateUrl: 'templates/partials/dashboard.html'\n    })\n    .state('teams', {\n      url: '/teams',\n      templateUrl: 'templates/partials/teams/teams.html'\n    });\n});\n","angular.module('DotaPlayground')\n\n  .directive('addATeam', [\n    'teamFactory',\n    'regionFactory',\n    '$timeout',\n    function(teamFactory, regionFactory, $timeout) {\n      return {\n        scope: {\n          team: '=',\n          update: '='\n        },\n        templateUrl: 'templates/directives/add-a-team.tpl.html',\n        link: function(scope) {\n          // Datepicker setup\n          scope.dateOptions = {\n            formatYear: 'yy',\n            startingDay: 1\n          };\n          scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\n          scope.format = scope.formats[0];\n\n          scope.regions = regionFactory.getRegions();\n\n          scope.addATeam = function(team) {\n            teamFactory.teamAPI().save(team).$promise\n              .catch(function(response) {\n                if (response.status == 422) {\n                  scope.errors = response.data;\n                }\n              })\n              .then(function(response) {\n                if (response) {\n                  // Hide the notification after 3 secs.\n                  $timeout(function() {\n                    scope.showNotification = false;\n                  }, 3000);\n\n                  // Updates the ui to show newly added team.\n                  teamFactory.teams.push(team);\n\n                  // Clear the form.\n                  scope.add_a_team_form.$setPristine();\n                  scope.team = null;\n                }\n              })\n              .finally(function() {\n                scope.showNotification = true;\n              });\n          };\n\n          scope.updateTeam = function(team) {\n            console.log(team);\n          };\n\n          scope.open = function($event) {\n            scope.opened = true;\n          };\n        }\n      };\n  }\n]);\n","angular.module('DotaPlayground')\n\n  .controller('ModalInstanceCtrl', [\n    '$scope',\n    '$modalInstance',\n    'team',\n    'teamFactory',\n    function($scope, $modalInstance, team, teamFactory) {\n      $scope.team = team;\n\n      $scope.update = function() {\n        $modalInstance.close($scope.team);\n      };\n\n      $scope.delete = function() {\n        teamFactory.teamAPI().delete({id: team.id}).$promise\n          .then(function(response) {\n            if (response) {\n              angular.forEach(teamFactory.teams, function(team, index) {\n                if (team.id === response.id) {\n                  teamFactory.teams.splice(index, 1);\n                }\n              });\n            }\n          });\n\n        $modalInstance.dismiss('deleted');\n      };\n\n      $scope.cancel = function() {\n        $modalInstance.dismiss('cancel');\n      };\n    }\n  ])\n\n  .directive('teamInfo', [\n    'teamFactory',\n    'regionFactory',\n    '$modal',\n    '$log',\n    function(teamFactory, regionFactory, $modal) {\n      return {\n        scope: {},\n        templateUrl: 'templates/directives/team-info.tpl.html',\n        controller: function($scope, $modal, $log) {\n          $scope.regions = regionFactory.getRegions();\n\n          if (teamFactory.initialLoad) {\n            // If initial load, query teams from API, and\n            // update the teams array in teamFactory.\n            $scope.teams = teamFactory.teamAPI().query();\n            teamFactory.teams = $scope.teams;\n          } else {\n            // If not initial load, simply read the array\n            // in teamFactory.\n            $scope.teams = teamFactory.teams;\n          }\n\n          $scope.open = function(size, selectedTeam) {\n            var newTeamInfo = {};\n\n            var modalInstance = $modal.open({\n              animation: true,\n              templateUrl: 'templates/partials/teams/team-modal.html',\n              controller: 'ModalInstanceCtrl',\n              size: size,\n              scope: $scope,\n              resolve: {\n                team: function() {\n                  return angular.copy(selectedTeam);\n                }\n              }\n            });\n\n            modalInstance.result.then(function(teamModified) {\n              $log.info('teamModified = '+ teamModified.name + ' Finished at: ' + new Date());\n\n              for (var prop in selectedTeam) {\n                if (selectedTeam.hasOwnProperty(prop) && teamModified.hasOwnProperty(prop)) {\n                  if (selectedTeam[prop] != teamModified[prop]) {\n                    newTeamInfo[prop] = teamModified[prop];\n                  }\n                }\n              }\n\n              var teamUpdate = teamFactory.teamAPI().update({id: teamModified.id}, newTeamInfo);\n              teamUpdate.$promise\n                .catch(function(response) {\n                  if (response.status == 422) {\n                    $log.info('Update for ' + teamModified.name + ' failed');\n\n                    // Todo: Show the error message to users.\n                    // ------------\n                  }\n                })\n                .then(function(response) {\n                  if (response) {\n                    // Update the team in teamFactory.\n                    angular.forEach(teamFactory.teams, function(team, index) {\n                      if (team.id === teamModified.id) {\n                        teamFactory.teams[index] = teamModified;\n                      }\n                    });\n                  }\n                });\n            }, function(msg) {\n              if (msg === 'cancel') {\n                $log.info('Modal dismissed at: ' + new Date());\n              } else {\n                $log.info(msg);\n              }\n            });\n          };\n        }\n      };\n    }\n  ]);\n","angular.module('DotaPlayground')\n\n  .factory('regionFactory', function() {\n    return {\n      getRegions: function() {\n        return [\n          'China',\n          'South-East Asia & Australia',\n          'Western Europe',\n          'Eastern Europe',\n          'North & South America'\n        ];\n      }\n    };\n  });\n","angular.module('DotaPlayground')\n\n  .factory('teamFactory', ['$resource', function($resource) {\n    // return $resource('api/teams');\n    return {\n      teamAPI: function() {\n        var teams = $resource('api/teams/:id', {id: '@id'}, {\n          'update': { method:'PUT' }\n        });\n        return teams;\n      },\n      teams: [],\n      initialLoad: true\n    };\n  }]);\n"],"sourceRoot":"/source/"}